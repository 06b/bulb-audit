<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Component issues on Bulb Audit</title>
    <link>https://heydon.github.io/bulb-audit/patterns/components/</link>
    <description>Recent content in Component issues on Bulb Audit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://heydon.github.io/bulb-audit/patterns/components/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Answer choices</title>
      <link>https://heydon.github.io/bulb-audit/patterns/components/answer-choices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://heydon.github.io/bulb-audit/patterns/components/answer-choices/</guid>
      <description>Introduction The Join site&amp;rsquo;s question screens include custom radio button-like components for selecting an answer. For example, the &amp;ldquo;My home uses&amp;rdquo; page offers a choice between &amp;ldquo;Gas &amp;amp; Electricity&amp;rdquo; and &amp;ldquo;Electricity only&amp;rdquo; (pictured).
Despite having the appearance of radio buttons (the familiar encircled dot design is used), these are custom components, built in Angular from &amp;lt;div&amp;gt; and &amp;lt;span&amp;gt; elements. A number of issues emerge:
 The controls do not offer any semantic information (role, state etc.</description>
    </item>
    
    <item>
      <title>Bedrooms stepper</title>
      <link>https://heydon.github.io/bulb-audit/patterns/components/bedroom-stepper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://heydon.github.io/bulb-audit/patterns/components/bedroom-stepper/</guid>
      <description>Introduction The Join Site provides a &amp;ldquo;stepper&amp;rdquo; component for incrementing and decrementing the number of bedrooms the user&amp;rsquo;s house or flat contains (pictured).
There are a number of issues relating to this implementation:
 The plus and minus buttons do not have focus styles The plus and minus buttons do not have labels The purpose of the controls is not reported to screen readers The updating of the number of bedrooms is not reported to screen readers  It is also unintuitive that the values &amp;lsquo;cycle&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Collapsible sections</title>
      <link>https://heydon.github.io/bulb-audit/patterns/components/collapsible-sections/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://heydon.github.io/bulb-audit/patterns/components/collapsible-sections/</guid>
      <description>Introduction Collapsible sections are one of the simpler interaction design primitives. All they do is toggle the appearance of the flow content they introduce. The advantage of having collapsed section in the first place is that the user is afforded an overview of the page structure without necessitating scrolling through large quantities of content.
Despite the simplicity, there are a number of provisions to ensure collapsible sections are accessible:</description>
    </item>
    
    <item>
      <title>Menu buttons</title>
      <link>https://heydon.github.io/bulb-audit/patterns/components/menu-button/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://heydon.github.io/bulb-audit/patterns/components/menu-button/</guid>
      <description>Introduction A mainstay in responsive design, the &amp;ldquo;hamburger&amp;rdquo; menu button secretes a menu of navigation options that can be revealed on click, press, or — more likely — tap. There is some concern over the usability of hamburger menus meaning they should only be employed where absolutely necessary. If only a few navigation items are provided, simply rearranging them for small screens is probably preferable.
Where menu buttons are included, they need to conform to accessibility standards like any other control.</description>
    </item>
    
    <item>
      <title>Show password</title>
      <link>https://heydon.github.io/bulb-audit/patterns/components/show-password/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://heydon.github.io/bulb-audit/patterns/components/show-password/</guid>
      <description>Introduction The option to &amp;ldquo;show password&amp;rdquo; when one is writing it is a sound inclusive design feature, helping users to compose or check their writing of passwords. However, a &amp;ldquo;show password&amp;rdquo; button that is not technically accessible fails some of the users who may want to take advantage of it.
The pictured show password control ahs a number of problems that need addressing:
 It functions as a button, but is marked up as a link It is not focusable by keyboard (because, as a link, it is missing an href) Were it focusable, upon clicking it, focus would be lost — because it is actually two controls, with one always hidden It appears before the field to which it relates, which is somewhat confusing visually and represents a backwards reading order non-visually.</description>
    </item>
    
    <item>
      <title>Usage chart</title>
      <link>https://heydon.github.io/bulb-audit/patterns/components/usage-chart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://heydon.github.io/bulb-audit/patterns/components/usage-chart/</guid>
      <description>Introduction The Bulb sites use a number of charts and graphs, primarily to illustrate fairly simple concepts. However, the energy usage chart found in the Account dashboard&amp;rsquo;s My usage screen communicates critical, detailed information. It — or an alternative for it — therefore needs to communicate the information it represents in a detailed and structured way.
Commonly, complex charts are accompanied by invisible data tables, intended for blind screen reader users.</description>
    </item>
    
  </channel>
</rss>